plugins {
    id 'java-library'
    id 'java-test-fixtures'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.ben-manes.versions' version "${versionsPluginVersion}"
    id 'com.github.spotbugs' version "${spotbugsPluginVersion}"
    id 'com.google.cloud.tools.jib' version "${googleJibPluginVersion}"
    id 'com.gtramontina.ghooks.gradle' version "${ghooksPluginVersion}"
    id 'org.springframework.boot' version "${springBootPluginVersion}"
    id 'org.owasp.dependencycheck' version "${dependencyCheckPluginVersion}"
    id 'org.sonarqube' version "${sonarqubePluginVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementPluginVersion}"
    id 'project-report'
}

group = 'com.jrmcdonald'

repositories {
    mavenCentral()
}

dependencies {
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    implementation "net.sf.biweekly:biweekly:${biweeklyVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.cloud:spring-cloud-starter-kubernetes-all'

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testImplementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'

    testFixturesCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testFixturesAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testFixturesImplementation "com.github.spotbugs:spotbugs-annotations:${spotbugsVersion}"
    testFixturesImplementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testFixturesImplementation "com.squareup.okhttp3:mockwebserver:${okhttpVersion}"
    testFixturesImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

compileJava {
    options.compilerArgs << "-Werror"
    options.compilerArgs << "-Xlint:all"
    options.compilerArgs << "-Xlint:-try"
    options.compilerArgs << "-Xlint:-processing"
}

compileTestFixturesJava {
    options.compilerArgs << "-nowarn"
    options.compilerArgs << "-Xlint:none"
}

test {
    useJUnitPlatform()
    // Make sure the classes dir is used on the test classpath.
    // When test fixtures are involved, the JAR is used by default
    classpath = sourceSets.main.output.classesDirs + classpath - files(jar.archiveFile)
}

configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(bootJar)
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/jrmcdonald/ifsc-ical-generator")
            credentials {
                username = "jrmcdonald"
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

jacoco {
    toolVersion = "${jacocoToolVersion}"
}

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

jib {
    to {
        image = "docker.pkg.github.com/jrmcdonald/ifsc-ical-generator/ifsc-ical-generator:${project.version}"
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyCheck {
    format = 'ALL'
    analyzers {
        nodeEnabled = false
    }
}

spotbugs {
    toolVersion.set("${spotbugsToolVersion}")
}

spotbugsMain{
    reports {
        xml.enabled(false)
        html.enabled(true)
    }
    spotbugsTest.enabled = false
}

plugins.withType(JacocoPlugin) {
    tasks["test"].finalizedBy 'jacocoTestReport'
}

htmlDependencyReport {
    projects = project.allprojects
}

dependencyReport {
    projects = project.allprojects
}

sonarqube {
    properties {
        property "sonar.projectKey", "jrmcdonald_ifsc-ical-generator"
        property "sonar.organization", "jrmcdonald"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    }
}

check.dependsOn htmlDependencyReport
check.dependsOn dependencyReport
check.dependsOn dependencyCheckAnalyze
build.dependsOn dependencyUpdates
test.finalizedBy jacocoTestReport